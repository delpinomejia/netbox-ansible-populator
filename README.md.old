# NetBox Ansible Populator

This repository uses Ansible to populate NetBox via its API. It creates common objects such as sites, manufacturers, device roles and types, devices, interfaces, and IP addresses from YAML data files under `data/`.

## What gets created
- Sites
- Manufacturers
- Device roles
- Device types
- Devices
- Interfaces
- IP addresses (assigned to interfaces)

Extend by adding more tasks for VLANs, prefixes, tenants, tags, etc.

## Prerequisites
- NetBox URL reachable from where you execute Ansible
- NetBox API token with permissions to create/update objects
- Python 3.11+ and pip

## Configuration
Secrets should come from environment variables (prefer GitLab CI variables):
- `NETBOX_URL` (e.g. `https://netbox.example.com`)
- `NETBOX_TOKEN` (mask this in CI)
- `NETBOX_VALIDATE_CERTS` (optional, default `true`)

You can override or set defaults in `group_vars/all/netbox.yml` if needed.

## Data model
Edit the YAML files under `data/`:
- `manufacturers.yml`, `device_roles.yml`, `device_types.yml`
- `sites.yml`, `devices.yml`, `interfaces.yml`, `ip_addresses.yml`

## Running locally
On Windows PowerShell:

```powershell
# In repo root
python -m venv .venv
. .venv\Scripts\Activate.ps1
pip install -r requirements.txt
ansible-galaxy collection install -r collections/requirements.yml --collections-path ./collections

$env:NETBOX_URL = "https://netbox.example.com"
$env:NETBOX_TOKEN = "<your-token>"

ansible-playbook -i inventory/hosts.ini playbooks/populate.yml
```

On WSL (Ubuntu):

```bash
python3 -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt
ansible-galaxy collection install -r collections/requirements.yml --collections-path ./collections

export NETBOX_URL=https://netbox.example.com
export NETBOX_TOKEN=<your-token>

ansible-playbook -i inventory/hosts.ini playbooks/populate.yml
```

## GitLab CI
1) Push this repo to GitLab
2) In GitLab -> Settings -> CI/CD -> Variables, add:
   - `NETBOX_URL` = your NetBox URL
   - `NETBOX_TOKEN` = your NetBox API token (Mask & Protect)
3) The pipeline installs deps and runs the playbook. The job `populate_netbox` runs only if both variables are set.

## Notes for NetBox in Kubernetes
- Ensure `NETBOX_URL` resolves to the NetBox service (Ingress, LoadBalancer, or NodePort). If access is internal-only, run the job from a runner with network access to the cluster, or port-forward locally and point `NETBOX_URL` at the forwarded address.

## Extending
Add more tasks under `roles/netbox_populate/tasks/` and corresponding data under `data/`. Good next candidates:
- `vlans.yml` using `netbox.netbox.nb_vlan`
- `prefixes.yml` using `netbox.netbox.nb_prefix`
- `tenants.yml` using `netbox.netbox.nb_tenant`

## Troubleshooting
- Missing module errors: ensure Galaxy collections are installed and `collections_paths` is set in `ansible.cfg`.
- Auth errors: verify `NETBOX_TOKEN` scope and that `NETBOX_URL` is correct.
- TLS issues: set `NETBOX_VALIDATE_CERTS=false` if using self-signed certificates.

